#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

printf "Committing as ${YELLOW}$(git config user.name) ${NC}/ ${YELLOW}$(git config user.email)${NC}\n"

PASS=true

CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACM -- '*.php')

# early return
if [[ -z "$CHANGED_FILES" ]]; then
  # printf "${YELLOW}No .php files in this commit${NC}\n"
  exit 0;
fi

printf "Running pre commit hook\n"

# ecs
PHP_ECS="./vendor/bin/ecs"
if ([ -x $PHP_ECS ] && [ -n "$CHANGED_FILES"]); then
    printf "ECS start"
    $PHP_ECS check ${CHANGED_FILES} --fix
    if [[ "$?" == 0 ]]; then
        # Add the fixed files back to the staging area
        printf "${GREEN}ECS passed${NC}\n"
        if [[ ! -z "$CHANGED_FILES" ]]; then
          git add "${CHANGED_FILES}"
        fi
    else
        PASS=false # Different code than 0 means that there were unresolved fixes
    fi
else
    printf "${YELLOW}ECS missing or no .php changes made${NC}\n"
fi

# phpstan
PHP_STAN="./vendor/bin/phpstan"
if ([ -x $PHP_STAN ] && [ -n "$CHANGED_FILES" ]); then
    printf "PHPStan start"
    if $PHP_STAN analyse --memory-limit=1G $CHANGED_FILES; then
      # All good
      printf "${GREEN}PHPStan passed${NC}\n"
    else
      PASS=false
    fi
fi

if ! $PASS; then
  printf "pre commit hook ${RED}FAILED${NC}\n"
  exit 1
else
  printf "pre commit hook ${GREEN}SUCCEEDED${NC}\n"
  exit 0
fi